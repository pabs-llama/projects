<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Task 9.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1070"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="cran_logs_2015_01_01" custom_title="0" dock_id="27" table="4,20:maincran_logs_2015_01_01"/><dock_state state="000000ff00000000fd0000000100000002000002c000000294fc0100000006fb000000160064006f0063006b00420072006f00770073006500310100000000000002b60000000000000000fb000000180064006f0063006b00420072006f007700730065003100320100000000000002b60000000000000000fb000000180064006f0063006b00420072006f007700730065003100330100000000ffffffff0000000000000000fb000000180064006f0063006b00420072006f007700730065003100340100000000000003370000000000000000fb000000180064006f0063006b00420072006f007700730065003200360100000000ffffffff0000000000000000fb000000180064006f0063006b00420072006f007700730065003200370100000000000002c00000014200ffffff000002c00000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="cran_logs_2015_01_01" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="108"/><column index="2" value="55"/><column index="3" value="106"/><column index="4" value="113"/><column index="5" value="50"/><column index="6" value="76"/><column index="7" value="126"/><column index="8" value="84"/><column index="9" value="59"/><column index="10" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 7*">Questions
-- 9.1 Give the package name and how many times they're downloaded. Order by highest to lowest number of times downloaded.
SELECT package, count(download_date) as count
FROM cran_logs_2015_01_01
WHERE time &gt; &quot;09:00:00&quot; AND time &lt;&quot;11:00:00&quot;
GROUP BY package
ORDER BY count DESC

-- 9.2 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM
SELECT package, DENSE_RANK() OVER(ORDER BY count(download_date)DESC) as rank
FROM cran_logs_2015_01_01
WHERE time &gt; &quot;09:00:00&quot; AND time &lt;&quot;11:00:00&quot;
GROUP BY package

-- 9.3 How many records (downloads) are from China (&quot;CN&quot;) or Japan(&quot;JP&quot;) or Singapore (&quot;SG&quot;)?
SELECT count(download_date), country
FROM cran_logs_2015_01_01
WHERE country IN (&quot;CN&quot;,&quot;JP&quot;,&quot;SG&quot;)
GROUP BY country

-- 9.4 Print the countries whose downloads are more than the downloads from China (&quot;CN&quot;)

SELECT country, count (*) AS total_downloads
FROM cran_logs_2015_01_01
GROUP BY country
HAVING COUNT(*) &gt; (
    SELECT COUNT(*) 
    FROM cran_logs_2015_01_01
    WHERE country = 'CN'
);

--9.5 Print the length of each package name for packages which appear only once. 
-- In the same query, show the average length of all such packages.
SELECT package, length(package) as len, AVG (length(package)) OVER () as avg_length
FROM cran_logs_2015_01_01
GROUP BY package
HAVING count(package) = 1


-- 9.6 Get the package whose download count ranks 2nd (print package name and its download count).

with ranks as (
SELECT package, count(download_date) as count, DENSE_RANK() OVER(ORDER BY count(download_date)DESC) as rank
FROM cran_logs_2015_01_01
GROUP BY package)

SELECT package,  count as download_count
FROM ranks
WHERE rank = 2

-- 9.7 Print the name of the package whose download count is bigger than 1000.
SELECT package, count(*) as download_count
FROM cran_logs_2015_01_01
GROUP BY package
HAVING count(*) &gt; 1000

-- 9.8 The field &quot;r_os&quot; is the operating system of the users.
SELECT DISTINCT r_os
FROM cran_logs_2015_01_01

-- Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).
--Hint: to write a query which can ignore the version number, try this: https://github.com/asg017/sqlite-regex)
SELECT 
    CASE 
        WHEN r_os LIKE 'darwin%' THEN 'darwin'
        WHEN r_os LIKE 'linux%' THEN 'linux'
        ELSE r_os 	
    END AS os_group,
    COUNT(*) AS total_downloads,
    COUNT(*) * 1.0 / (SELECT COUNT(*) FROM cran_logs_2015_01_01) AS proportion
	--*The 1.0 in the proportion calculation is there to ensure floating-point division instead of integer division.
	--In SQL, when you divide two integers, the result is also an integer
	-- But if you multiply by 1.0 (or cast to a float), it forces floating-point division
FROM cran_logs_2015_01_01
GROUP BY os_group
ORDER BY total_downloads DESC;</sql><sql name="SQL 2*">.load ./regex0
select 'foo' regexp 'f'</sql><current_tab id="0"/></tab_sql></sqlb_project>
